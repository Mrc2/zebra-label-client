package com.oldworldind.app.gui.zebralabel;

import static java.nio.charset.Charset.defaultCharset;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.ServiceUI;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @since Dec 29, 2012 at 6:09:43 PM
 * @author mcolegrove
 */
public class LabelPrintManagerForm extends javax.swing.JPanel {
    private static final long serialVersionUID = 3366893204177851100L;
    private static final Logger LOG = LogManager.getLogger(LabelPrintManagerForm.class);
    public static final String FILETYPE_XREF = "Xref";
    public static final String FILETYPE_ZPL = "txt/wri";
    private static final String DATE_DISPLAYPATTERN = "MM/dd/yy @HH:mm:ss:SSSSS";
    private static final String OTHER_LINE_END = "\n";
    private static final String PRINTER_IMAGE_ICON = "/com/oldworldind/app/gui/zebralabel/zebralabelprt45842-0.png";

    private static void checkZipFilePath(String pathToZipFiles) {
        File dir = new File(pathToZipFiles);

        if (dir.isDirectory() && dir.canRead() && dir.exists()) {
            return;
        }

        throw new IllegalArgumentException("Path to Zpl Files:" + pathToZipFiles + " is not a valid directory");
    }

    private static boolean checkPrinterSettings(String zplPrinterName) {

        if (zplPrinterName == null || zplPrinterName.isEmpty()) {
            throw new IllegalArgumentException(
                "A Valid ZPL Enabled Printer was not found with name:" + zplPrinterName + ": ");
        }
        PrinterFinderSvc svc = new PrinterFinderSvc();

        String fullName = svc.getFirstLabelPrinterName(zplPrinterName);
        if (fullName == null || fullName.isEmpty()) {
            throw new IllegalArgumentException(
                "A Valid ZPL Enabled Printer was not found with name:" + zplPrinterName + ": ");
        }
        PrintService psZebra = svc.getFirstLabelPrinterServiceNamed(fullName);
        DocFlavor autoflavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
        if (psZebra == null || !psZebra.isDocFlavorSupported(autoflavor)) {
            throw new IllegalArgumentException("A Valid ZPL Enabled Printer was not found with name:" + fullName + ": ");
        }
        return true;
    }
    private final String pathToZipFilesDefault;
    private final String zebraLabelPrinterDefault;
    private final LabelDataModel dm;

    public static LabelPrintManagerForm getInstance() {
        return new LabelPrintManagerForm("orderLabels.wri", "");
    }

    public static LabelPrintManagerForm getInstance(String pathToZipFiles, String zplPrinterName) {
        checkZipFilePath(pathToZipFiles);
        checkPrinterSettings(zplPrinterName);

        return new LabelPrintManagerForm(pathToZipFiles, zplPrinterName);
    }
    private final Dimension formDimensions;

    private LabelPrintManagerForm(String pathToZipFiles, String zplPrinterName) {
        this.pathToZipFilesDefault = pathToZipFiles;
        this.zebraLabelPrinterDefault = zplPrinterName;
        this.formDimensions = new Dimension(800, 500);

        dm = new LabelDataModel();
        initComponents();
    }

    private int getProratedWidthDimension(Dimension input, double heightxFactor) {
        int x = (int) (input.getHeight() * heightxFactor);

        return x;
    }

    private int getProrateHeightDimension(Dimension input, double widthxFactor) {
        int y = (int) (input.getWidth() * widthxFactor);

        return y;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jButtonLabelPrinterDiagnostics = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        //#FYI  Pre Creation Code of the JPanel
//        String zplpath = getDefaultZplPath(pathToZipFilesDefault);
        systemPanel = new javax.swing.JPanel();
        jPrinterIdentifierLabel = new javax.swing.JLabel();
        //#FYI  Enables starting lookup point from path in field list
        final String zplPrinterName = getDefaultZplPrinterName(zebraLabelPrinterDefault);
        jTextPrinterName = new javax.swing.JTextField();
        jButtonLookupPrinter = new javax.swing.JButton();
        jTabbedPaneLabelSource = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        barCodeSourceLabel = new javax.swing.JLabel();
        //#FYI File Name to Import to HFA
        //#FYI  Enables starting lookup point from path in field list
        barCodeImageFileName = new javax.swing.JTextField();
        openButton = new javax.swing.JButton();
        //#FYI  Enables starting lookup point for Zpl Files
        final String pathToArchive = getDefaultZplPath(pathToZipFilesDefault);
        archivePathTextField = new javax.swing.JTextField();
        archivePathLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jBarByteTextArea = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileInputJTable = new javax.swing.JTable();
        jButtonPanel = new javax.swing.JPanel();
        jButtonPrintLabelFile = new javax.swing.JButton();
        jButtonParse2 = new javax.swing.JButton();
        jButtonPrintLabelContent = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jPanelButtons2 = new javax.swing.JPanel();
        jButtonParse1 = new javax.swing.JButton();
        jButton2x4TestLabel = new javax.swing.JButton();
        jButtonPrintTestLabel = new javax.swing.JButton();
        jButtonPrintConfig = new javax.swing.JButton();
        jButtonParse = new javax.swing.JButton();

        jButtonLabelPrinterDiagnostics.setText("Printer Diagnostics");
        jButtonLabelPrinterDiagnostics.setToolTipText("");
        jButtonLabelPrinterDiagnostics.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonLabelPrinterDiagnosticsMouseClicked(evt);
            }
        });
        jButtonLabelPrinterDiagnostics.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLabelPrinterDiagnosticsActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("File");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar3.add(jMenu6);

        jMenu7.setText("File");
        jMenuBar4.add(jMenu7);

        jMenu8.setText("Edit");
        jMenuBar4.add(jMenu8);

        jMenu9.setText("jMenu9");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE));

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE));
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE));

        setBackground(new java.awt.Color(174, 208, 234));
        setMaximumSize(new java.awt.Dimension(1200, 1024));
        setPreferredSize(formDimensions);

        jPrinterIdentifierLabel.setText("Label Printer ");

        jTextPrinterName.setText(zplPrinterName);

        jButtonLookupPrinter.setIcon(new javax.swing.ImageIcon(getClass().getResource(PRINTER_IMAGE_ICON)));
        jButtonLookupPrinter.setText("Printer");
        jButtonLookupPrinter.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonLookupPrinterMouseClicked(evt);
            }
        });
        jButtonLookupPrinter.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLookupPrinteropenFile(evt);
            }
        });

        jTabbedPaneLabelSource.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneLabelSourceStateChanged(evt);
            }
        });

        barCodeSourceLabel.setText("Bar Code Source");

        barCodeImageFileName.setText(pathToZipFilesDefault);
        barCodeImageFileName.setMaximumSize(new java.awt.Dimension(45, 14));

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonopenFile(evt);
            }
        });

        archivePathTextField.setText(pathToArchive);

        archivePathLabel.setText("Archive Path");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
            .add(22, 22, 22)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(archivePathLabel)
            .add(10, 10, 10))
            .add(barCodeSourceLabel))
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
            .add(38, 38, 38)
            .add(barCodeImageFileName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(18, 18, 18)
            .add(openButton)
            .add(0, 0, Short.MAX_VALUE))
            .add(jPanel3Layout.createSequentialGroup()
            .add(6, 6, 6)
            .add(archivePathTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)))
            .add(73, 73, 73)));
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
            .add(barCodeImageFileName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(barCodeSourceLabel)
            .add(openButton))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
            .add(archivePathTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(archivePathLabel))
            .addContainerGap(91, Short.MAX_VALUE)));

        jTabbedPaneLabelSource.addTab("Bar Code Label File", jPanel3);

        jBarByteTextArea.setColumns(20);
        jBarByteTextArea.setRows(5);
        jScrollPane1.setViewportView(jBarByteTextArea);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
            .addContainerGap()));
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE));

        jTabbedPaneLabelSource.addTab("Bar Code Content", jPanel4);

        log.setColumns(20);
        log.setRows(5);
        log.setName("log"); // NOI18N
        jScrollPane4.setViewportView(log);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
            .add(20, 20, 20)
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 411,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(15, Short.MAX_VALUE)));
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)));

        jTabbedPaneLabelSource.addTab("Status Log", jPanel5);

        org.jdesktop.layout.GroupLayout systemPanelLayout = new org.jdesktop.layout.GroupLayout(systemPanel);
        systemPanel.setLayout(systemPanelLayout);
        systemPanelLayout.setHorizontalGroup(
            systemPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(systemPanelLayout.createSequentialGroup()
            .add(20, 20, 20)
            .add(jPrinterIdentifierLabel)
            .add(16, 16, 16)
            .add(jTextPrinterName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 147,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jButtonLookupPrinter)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, systemPanelLayout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jTabbedPaneLabelSource, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 467,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(35, 35, 35)));
        systemPanelLayout.setVerticalGroup(
            systemPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(systemPanelLayout.createSequentialGroup()
            .addContainerGap()
            .add(systemPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
            .add(jTextPrinterName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jPrinterIdentifierLabel)
            .add(jButtonLookupPrinter))
            .add(18, 18, 18)
            .add(jTabbedPaneLabelSource)));

//        final Integer[] columnWidth = (Integer[]) Array.newInstance(Integer.class, dm.getColumnCount());
        fileInputJTable.setModel(dm);
        fileInputJTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        fileInputJTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                int viewRow = fileInputJTable.getSelectedRow();
                if (viewRow < 0) {
                    //Selection got filtered away.
                    barCodeImageFileName.setText("");
                } else {
                    int modelRow =
                        fileInputJTable.convertRowIndexToModel(viewRow);

                    Object selectedName = fileInputJTable.getModel().getValueAt(modelRow, 1);
                    if (selectedName instanceof String) {
                        barCodeImageFileName.setText((String) selectedName);

                    } else {
                        barCodeImageFileName.setText(
                            String.format("Selected Row in view: %d. "
                            + "Selected Row in model: %d.",
                            viewRow, modelRow));
                    }
                }
            }
        });
        jScrollPane2.setViewportView(fileInputJTable);

        jButtonPanel.setBackground(getBackground());
        jButtonPanel.setPreferredSize(new java.awt.Dimension(450, 41));

        jButtonPrintLabelFile.setText("Print Label File");
        jButtonPrintLabelFile.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonPrintLabelFileMouseClicked(evt);
            }
        });
        jButtonPrintLabelFile.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintLabelFileActionPerformed(evt);
            }
        });

        jButtonParse2.setText("Calibrate Printer");
        jButtonParse2.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonParse2jButtonCalibrateClicked(evt);
            }
        });

        jButtonPrintLabelContent.setText("Print Label Content");
        jButtonPrintLabelContent.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonPrintLabelContentMouseClicked(evt);
            }
        });
        jButtonPrintLabelContent.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintLabelContentActionPerformed(evt);
            }
        });

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jButtonPanelLayout = new org.jdesktop.layout.GroupLayout(jButtonPanel);
        jButtonPanel.setLayout(jButtonPanelLayout);
        jButtonPanelLayout.setHorizontalGroup(
            jButtonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jButtonPanelLayout.createSequentialGroup()
            .add(252, 252, 252)
            .add(jButtonParse2)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jButtonPanelLayout.createSequentialGroup()
            .add(25, 25, 25)
            .add(jButtonPrintLabelFile)
            .add(18, 18, 18)
            .add(jButtonPrintLabelContent)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jButtonClose)
            .add(22, 131, Short.MAX_VALUE)));
        jButtonPanelLayout.setVerticalGroup(
            jButtonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButtonPanelLayout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jButtonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
            .add(jButtonPrintLabelFile)
            .add(jButtonPrintLabelContent)
            .add(jButtonClose))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
            Short.MAX_VALUE)
            .add(jButtonParse2)
            .addContainerGap()));

        jPanelButtons2.setBackground(getBackground());

        jButtonParse1.setText("Parse Label File");
        jButtonParse1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonParseClicked(evt);
            }
        });
        jButtonParse1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParse1ActionPerformed(evt);
            }
        });

        jButton2x4TestLabel.setText("2x4 Test Label");
        jButton2x4TestLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2x4TestLabelMouseClicked(evt);
            }
        });
        jButton2x4TestLabel.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2x4TestLabelActionPerformed(evt);
            }
        });

        jButtonPrintTestLabel.setText("4x6 Test Label");
        jButtonPrintTestLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doPrintTestLabelEvent(evt);
            }
        });
        jButtonPrintTestLabel.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintTestLabelActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelButtons2Layout = new org.jdesktop.layout.GroupLayout(jPanelButtons2);
        jPanelButtons2.setLayout(jPanelButtons2Layout);
        jPanelButtons2Layout.setHorizontalGroup(
            jPanelButtons2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelButtons2Layout.createSequentialGroup()
            .addContainerGap()
            .add(jButtonPrintTestLabel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jButton2x4TestLabel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
            Short.MAX_VALUE)
            .add(jButtonParse1)
            .addContainerGap()));
        jPanelButtons2Layout.setVerticalGroup(
            jPanelButtons2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelButtons2Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanelButtons2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
            .add(jButtonParse1)
            .add(jButton2x4TestLabel)
            .add(jButtonPrintTestLabel))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        jButtonPrintConfig.setText("Print Label Config");
        jButtonPrintConfig.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonPrintConfigjButtonCalibrateClicked(evt);
            }
        });

        jButtonParse.setText("Calibrate Printer");
        jButtonParse.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCalibrateClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
            .add(31, 31, 31)
            .add(systemPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 471,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(jButtonPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 565,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
            .add(33, 33, 33)
            .add(jPanelButtons2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
            .add(42, 42, 42)
            .add(jButtonParse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(18, 18, 18)
            .add(jButtonPrintConfig)))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
            .add(20, 20, 20)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(systemPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(jButtonPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
            .add(jButtonParse)
            .add(jButtonPrintConfig, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(jPanelButtons2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));
    }// </editor-fold>

    private void openButtonopenFile(java.awt.event.ActionEvent evt) {

        String pickupPath = this.barCodeImageFileName.getText();
        JFileChooser fchooser = new JFileChooser(pickupPath);
        fchooser.setMultiSelectionEnabled(true);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Zpl Label Content Files", "txt", "wri", "zpl", "zip", "jar");
        fchooser.setFileFilter(filter);

        int returnVal = fchooser.showOpenDialog(LabelPrintManagerForm.this);
        // show file extension - detect if text or a zip. size.  allow accumulation of a count of file names

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] files = fchooser.getSelectedFiles();
            SimpleDateFormat fdfd = new SimpleDateFormat(DATE_DISPLAYPATTERN);

            int rc = this.fileInputJTable.getModel().getRowCount();
            boolean canAddModViewCell = fileInputJTable.isCellEditable(rc, 0);

            for (int fi = 0; fi < files.length; fi++) {
                File file = files[fi];
                //This is where a real application would open the file.
                log.append("Opening: " + file.getName() + " path" + file.getAbsolutePath() + " updated:" + fdfd.format(
                    file.lastModified())
                    + " add row after:" + rc + " can Add^" + canAddModViewCell + "." + OTHER_LINE_END);

                if (canAddModViewCell) {
                    populateImageFileTable(file, fdfd);
                    this.archivePathTextField.setText(file.getParent());
                    this.barCodeImageFileName.setText(file.getName());
                }
            }

        } else {
            log.append("Open command cancelled by user." + OTHER_LINE_END);
        }
        log.setCaretPosition(log.getDocument().getLength());
    }

    private void populateImageFileTable(File file, DateFormat fdfd) {
        // add file info to table model

        for (int i = 0; i < fileInputJTable.getColumnCount(); i++) {
            String coName = fileInputJTable.getColumnName(i);

            log.append("add to cell:" + coName);
        }

        log.append(OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        String isZip = "other";

        int pageCnt = 0;
        Date batchDate = null;
        long recCnt = -1;
        if (isZpl(file.getAbsolutePath())) {
            isZip = FILETYPE_ZPL;

            Map<String, Object> bhSet = ZplFileParser.parse(file);
            if (bhSet.containsKey(ZplFileParser.FILE_SIZE_COUNT)) {
                recCnt = (Long) bhSet.get(ZplFileParser.FILE_SIZE_COUNT);
            }
            if (bhSet.containsKey(ZplFileParser.LABEL_COUNT_PROPERTY)) {
                pageCnt = (Integer) bhSet.get(ZplFileParser.LABEL_COUNT_PROPERTY);
            }
            if (bhSet.containsKey(ZplFileParser.LABEL_FILE_LASTMODIFIED_DATE)) {
                batchDate = (Date) bhSet.get(ZplFileParser.LABEL_FILE_LASTMODIFIED_DATE);
            }
        }

        dm.addFileInfo(file, isZip, recCnt, pageCnt, batchDate);
        LOG.info("2 colname:" + dm.getColumnName(2) + OTHER_LINE_END);


        parseImageReferences();
    }

    private void jButtonLabelPrinterDiagnosticsActionPerformed(java.awt.event.ActionEvent evt) {

        log.append(OTHER_LINE_END);
        log.append("Hidden Print Test Button Action now" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());
    }

    private void jButtonLabelPrinterDiagnosticsMouseClicked(java.awt.event.MouseEvent evt) {

        doPrintTestLabel(evt);
    }

    private void jButtonPrintLabelFileMouseClicked(java.awt.event.MouseEvent evt) {

        doPrintRealLabel(evt);

    }

    private void jButtonPrintLabelFileActionPerformed(java.awt.event.ActionEvent evt) {

        log.append("Printer Label File Button Action Performed!!" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());
    }

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {
        LOG.warn("do close");
        Container frame = jButtonClose.getParent();
        while (!(frame instanceof JFrame)) {
            frame = frame.getParent();
        }
        JFrame jframe = (JFrame) frame;
        jframe.dispose();
    }

    private void jButtonPrintTestLabelActionPerformed(java.awt.event.ActionEvent evt) {
        log.append("Printer Test Label Button Action Performed!!" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());
    }

    private void doPrintTestLabelEvent(java.awt.event.MouseEvent evt) {
        doPrintTestLabel(evt);
    }

    private void jButton2x4TestLabelActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButtonLookupPrinteropenFile(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton2x4TestLabelMouseClicked(java.awt.event.MouseEvent evt) {
        doPrint2x4TestLabel(evt);
    }

    private void jButtonLookupPrinterMouseClicked(java.awt.event.MouseEvent evt) {
        doPrinterLookup(evt);
    }

    private void jButtonParse1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButtonCalibrateClicked(java.awt.event.MouseEvent evt) {

        doCalibrate(evt);
    }

    private void jButtonParseClicked(java.awt.event.MouseEvent evt) {

        parseImageReferences();
    }

    private void jButtonParse2jButtonCalibrateClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void jButtonPrintConfigjButtonCalibrateClicked(java.awt.event.MouseEvent evt) {
        doListPrinterConfig(evt);
    }

    private void jButtonPrintLabelContentMouseClicked(java.awt.event.MouseEvent evt) {
        doPrintPastedLabel(evt);
    }

    private void jButtonPrintLabelContentActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTabbedPaneLabelSourceStateChanged(javax.swing.event.ChangeEvent evt) {

        // TODO add your handling code here:
        log.append("Label Source Tab statechanged:" + evt + ": all done" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        JTabbedPane sourceTabbedPane = (JTabbedPane) evt.getSource();
        int index = sourceTabbedPane.getSelectedIndex();
        if (1 == index) {
            jButtonPrintLabelContent.setEnabled(true);
            jButtonPrintLabelFile.setEnabled(false);
            return;
        }
        if (0 == index) {
            jButtonPrintLabelContent.setEnabled(false);
            jButtonPrintLabelFile.setEnabled(true);
            return;
        }
        jButtonPrintLabelContent.setEnabled(false);
        jButtonPrintLabelFile.setEnabled(false);
    }
    // Variables declaration - do not modify
    private javax.swing.JLabel archivePathLabel;
    private javax.swing.JTextField archivePathTextField;
    private javax.swing.JTextField barCodeImageFileName;
    private javax.swing.JLabel barCodeSourceLabel;
    private javax.swing.JTable fileInputJTable;
    private javax.swing.JTextArea jBarByteTextArea;
    private javax.swing.JButton jButton2x4TestLabel;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonLabelPrinterDiagnostics;
    private javax.swing.JButton jButtonLookupPrinter;
    private javax.swing.JPanel jButtonPanel;
    private javax.swing.JButton jButtonParse;
    private javax.swing.JButton jButtonParse1;
    private javax.swing.JButton jButtonParse2;
    private javax.swing.JButton jButtonPrintConfig;
    private javax.swing.JButton jButtonPrintLabelContent;
    private javax.swing.JButton jButtonPrintLabelFile;
    private javax.swing.JButton jButtonPrintTestLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelButtons2;
    private javax.swing.JLabel jPrinterIdentifierLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPaneLabelSource;
    private javax.swing.JTextField jTextPrinterName;
    private javax.swing.JTextArea log;
    private javax.swing.JButton openButton;
    private javax.swing.JPanel systemPanel;
    // End of variables declaration

    private void parseImageReferences() {
        LOG.info("parseImageReferences");
    }

    private String getDefaultZplPath(String prop) {
        if (prop == null || prop.isEmpty()) {
            return "/";
        }
        return prop;
    }

    private String getDefaultZplPrinterName(String prop) {
        if (prop == null || prop.isEmpty()) {
            return "Zebra";
        }
        return prop;
    }

    private boolean isZpl(String absolutePath) {
        File f = new File(absolutePath);
        if (!f.isFile()) {
            return false;
        }

        String ext = FilenameUtils.getExtension(f.getAbsolutePath());
        if (ext == null) {
            return false;
        }

        return "zpl".equals(ext) || "txt".equals(ext) || "wri".equals(ext);
    }
    private static final String WINDOWS_LINE_END = "\r\n";

    private byte[] getCancelJobBytes() {
        String lineEnd = OTHER_LINE_END;
        StringBuilder buf = new StringBuilder(123);
        buf.append("<------------- Finish and Clear Jobs in Memory --------------------------------------->").append(
            lineEnd);
        buf.append("~JA").append(lineEnd);  // finish and clear jobs in memory
        return buf.toString().getBytes(Charset.forName(ZplFileParser.BYTE_CHAR_READER));
    }

    private byte[] getPrintConfigBytes() {
        String lineEnd = OTHER_LINE_END;
        StringBuilder buf = new StringBuilder(123);
        buf.append("<------------- Print Label Printer Config Label --------------------------------------->").append(
            lineEnd);
        buf.append("~WC").append(lineEnd);  // write configuration label
        return buf.toString().getBytes(Charset.forName(ZplFileParser.BYTE_CHAR_READER));
    }

    protected byte[] getPrinterCalibrateBytes() {
        String lineEnd = OTHER_LINE_END;
        StringBuilder buf = new StringBuilder(123);
        buf.append("<------------- Reset ZPL Printer script --------------------------------------->").append(lineEnd);

        buf.append("~JR").append(lineEnd);
        buf.append("~JA").append(lineEnd); // cancel all prior labels
        buf.append("~JG").append(lineEnd); // graphic media sensor
        
        return buf.toString().getBytes(Charset.forName(ZplFileParser.BYTE_CHAR_READER));
    }

    protected byte[] get4x6CustomLabelBytes() {
        String lineEnd = OTHER_LINE_END;
        StringBuilder buf = new StringBuilder(123);
        buf.append(
            "<-------------4x6 TEST Label---------------Click file, print, select Zebra printer, press print--------------------------------------->").append(
            lineEnd);

        buf.append("~CC^").append(lineEnd);
        buf.append("^XA^JMA^FS^XZ").append(lineEnd);
        buf.append("^XA^SS,,,1223^FS^XZ").append(lineEnd);
        buf.append("^XA^MNY^FS^XZ").append(lineEnd);
        buf.append("^XA^MMT^FS^XZ").append(lineEnd);
        buf.append("^XA^MD+00^FS^XZ").append(lineEnd);
        buf.append("^XA^PRC^FS^XZ").append(lineEnd);
        buf.append("^XA^IDR:*.GRF^XZ").append(lineEnd);
        buf.append("^XA^IDR:*.*^XZ").append(lineEnd);
        buf.append("^XA^MCY^XZ").append(lineEnd);

        buf.append("^XA^LH0000,0000^FS^PON^FS").append(lineEnd);
        buf.append("^FO0301,0012^GB0000,0190,0004^FS").append(lineEnd);
        buf.append("^FO0016,0016^A0N,0028,0033^FDSUPPLIER:^FS").append(lineEnd);
        buf.append("^FO0319,0020^A0N,0028,0033^FDSHIP TO:^FS").append(lineEnd);
        buf.append("^FO0016,0203^GB0777,0000,0004^FS").append(lineEnd);
        buf.append("^FO0393,0203^GB0000,0265,0004^FS").append(lineEnd);
        buf.append("^FO0020,0213^A0N,0022,0026^FDShip to Postal Code:^FS").append(lineEnd);
        buf.append("^FO0408,0215^A0N,0028,0033^FDCarrier:^FS").append(lineEnd);
        buf.append("^FO0406,0253^A0N,0028,0033^FDPRO #^FS").append(lineEnd);
        buf.append("^FO0406,0303^A0N,0028,0033^FDB/L #^FS").append(lineEnd);

        buf.append("^FO0010,0466^GB0775,0000,0004^FS").append(lineEnd);
        buf.append("^FO0010,0582^GB0773,0000,0004^FS").append(lineEnd);
        buf.append("^FO0026,0514^A0N,0039,0046^FDPO#:^FS").append(lineEnd);
        buf.append("^FO0010,0812^GB0775,0000,0004^FS").append(lineEnd);
        buf.append("^FO0068,0836^A0N,0028,0033^FDSSCC-18^FS").append(lineEnd);
        buf.append("^FO0062,0880^ADN,0036,0020^FD(^FS").append(lineEnd);
        buf.append("^FO0116,0880^ADN,0036,0020^FD)^FS").append(lineEnd);
        buf.append("^ISLB,N^FS^XZ").append(lineEnd);
        buf.append("^XA^MCY^XZ^XA^ILLB^FS").append(lineEnd);
        buf.append("^FO0000,0000^AAN,0000,0000^FD ^FS").append(lineEnd);

        buf.append("^FO0024,0046^ABN,0011,0007^FDOld World Industries, TEST4x6^FS").append(lineEnd);
        buf.append("^FO0024,0074^ABN,0011,0007^FD5000 W 41ST ST (MFG PLANT)^FS").append(lineEnd);

        buf.append("^FO0317,0050^AFN,0026,0013^FDCustomer Location #33^FS").append(lineEnd);
        buf.append("^FO0068,0263^A0N,0032,0040^FD(420) 61834^FS").append(lineEnd);

        DateFormat fdfd = new SimpleDateFormat(DATE_DISPLAYPATTERN);

        String dayTime = fdfd.format(new Date());
        buf.append("^FO0024,0092^ABN,0011,0007^FD").append(dayTime).append("^FS").append(lineEnd);
        String user = System.getProperty("user.name");
        buf.append("^FO0024,0110^ABN,0011,0007^FD").append("User:").append(user).append("^FS").append(lineEnd);
        buf.append("^FO0024,0150^ABN,0011,0007^FDTest Ville, IL 60804-4524^FS").append(lineEnd);
        buf.append("^FO0317,0080^ADN,0018,0010^FD800 N LYNCH SPUR^FS").append(lineEnd);
        buf.append("^FO0317,0156^ADN,0018,0010^FDDAnyWHere, USA 11111-9102^FS").append(lineEnd);
        buf.append("FO0520,0217^A0N,0028,0033^FDWLEL^FS").append(lineEnd);
        buf.append("^FO0506,0303^A0N,0028,0033^FD66666600^FS").append(lineEnd);
        buf.append("^FO0060,0303^BY03,3,100^BCN,0140,N,N^FD>;>842061834^FS").append(lineEnd);

        buf.append("^FO0128,0516^A0N,0032,0040^FD33906581^FS").append(lineEnd);
        buf.append("^FO0024,0633^ADN,0018,0010^FDIUM: 36 CS^FS").append(lineEnd);
        buf.append("^FO0024,0709^ADN,0018,0010^FD36 CS of Part: PRA0B3-02^FS").append(lineEnd);
        buf.append("^FO0024,0659^ADN,0018,0010^FDSUM: 216 GAL^FS").append(lineEnd);
        buf.append("^FO0076,0880^ADN,0036,0020^FD00 1 0074804 400000025 7^FS").append(lineEnd);
        buf.append("^FO0058,0920^BY04,3,100^BCN,0263,N,N^FD>;>800100748044000000257^FS").append(lineEnd);
        buf.append("^PQ0002,0000,0000,N^FS^MCN^XZ").append(lineEnd);
        buf.append("<----------------------------------break1--------------------------------------->").append(lineEnd);

        return buf.toString().getBytes(Charset.forName(ZplFileParser.BYTE_CHAR_READER));
    }

    private byte[] getLabelFileBytes(File labelFile) {

        DataInputStream fis = null;
        try {
            fis = new DataInputStream(FileUtils.openInputStream(labelFile));

            StringBuilder outputBuf = IoUtils.pipeToBuffer(fis);
            if (outputBuf == null) {
                LOG.warn("label bytes :nil:");
                return "".getBytes(Charset.forName(ZplFileParser.BYTE_CHAR_READER));
            }
            LOG.info("label bytes :" + outputBuf.length());

            return outputBuf.toString().getBytes(Charset.forName(ZplFileParser.BYTE_CHAR_READER));
        } catch (IOException ex) {
            LOG.error(ex, ex);
        } finally {
            IoUtils.cleanUpInputStream(fis);
        }
        LOG.warn("label bytes :nil:");
        return "".getBytes(Charset.forName(ZplFileParser.BYTE_CHAR_READER));
    }

    private void doPrintTestLabel(MouseEvent evt) {
        log.append(OTHER_LINE_END);
        log.append("list PrinterTest sNow" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        log.append("Event:" + evt.getButton() + " id:" + evt.getID() + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        PrinterFinderSvc svc = new PrinterFinderSvc();

//        byte[] by = getTestStringBytes();
//        byte[] by = getSampleLabelBytes();
//        byte[] by = getScoopedLabelBytes();
        byte[] custom4x6 = get4x6CustomLabelBytes();

        String labelPartial = jTextPrinterName.getText();

        log.append("matching partial:" + labelPartial + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());
        if (svc.isNameIpStyle(labelPartial)) {
            boolean done = doPrintStreamByIp(labelPartial, custom4x6);
            log.append("Print by Ip  Service Completed:" + done + " verses:" + labelPartial + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }

        String fullName = svc.getFirstLabelPrinterName(labelPartial);
        log.append("matching printers:" + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        PrintService psZebra = svc.getFirstLabelPrinterServiceNamed(fullName);
        if (psZebra == null) {
            log.append("service nof found for name:" + fullName + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }
        log.append("Found printer: " + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        jTextPrinterName.setText(fullName);
        DocPrintJob job = psZebra.createPrintJob();

        /**
         * TEXT_PLAIN_UTF_8 => text/plain; charset=utf-8
         */
//        DocFlavor flavor = DocFlavor.BYTE_ARRAY.TEXT_PLAIN_UTF_8;
        /**
         * TEXT_PLAIN_US_ASCII => text/plain; charset=us-ascii
         */
//        DocFlavor flavor = DocFlavor.BYTE_ARRAY.TEXT_PLAIN_US_ASCII;
        /**
         * Label content flavor =>text/plain;charset=Cp1252
         *
         */
//        DocFlavor flavor = new DocFlavor("text/plain",Charset.forName("Cp1252").getClass().getName());
        DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;

        Doc doc = new SimpleDoc(custom4x6, flavor, null);
        try {
            job.addPrintJobListener(new JobStatusListener(log));
            job.print(doc, null);

        } catch (PrintException e) {
            LOG.error("Failed 4x6 TEST Label Printing", e);
            log.append("Found printer: " + e + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
        }
    }

    private void doPrintRealLabel(MouseEvent evt) {

        log.append("Event:" + evt.getButton() + " id:" + evt.getID() + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());
        log.append("PrinterLabel File Button clicked!" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        PrinterFinderSvc svc = new PrinterFinderSvc();

        File labelFile = new File(archivePathTextField.getText() + File.separator + barCodeImageFileName.getText());
        String labelPartial = jTextPrinterName.getText();
        if (svc.isNameIpStyle(labelPartial)) {
            boolean done = doPrintByIp(labelPartial, labelFile);
            log.append("Print by Ip  Service Completed:" + done + " verses:" + labelPartial + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }
        String fullName = svc.getFirstLabelPrinterName(labelPartial);
        PrintService psZebra = svc.getFirstLabelPrinterServiceNamed(fullName);
        if (psZebra == null) {
            log.append("service nof found for name:" + fullName + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }
        log.append("Found printer: " + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        jTextPrinterName.setText(fullName);



        DocPrintJob job = psZebra.createPrintJob();
//        byte[] by = getScoopedCustomLabelBytes();

        byte[] by = getLabelFileBytes(labelFile);
        /**
         * TEXT_PLAIN_UTF_8 => text/plain; charset=utf-8
         */
//        DocFlavor flavor = DocFlavor.BYTE_ARRAY.TEXT_PLAIN_UTF_8;
        /**
         * TEXT_PLAIN_US_ASCII => text/plain; charset=us-ascii
         */
//        DocFlavor flavor = DocFlavor.BYTE_ARRAY.TEXT_PLAIN_US_ASCII;
        /**
         * Label content flavor =>text/plain;charset=Cp1252
         *
         */
//        DocFlavor flavor = new DocFlavor("text/plain",Charset.forName("Cp1252").getClass().getName());
        DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;

        Doc doc = new SimpleDoc(by, flavor, null);
        try {
            job.addPrintJobListener(new JobStatusListener(log));
            job.print(doc, null);

        } catch (PrintException e) {
            log.append("Found printer: " + e + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
        }
    }

    private void doPrint2x4TestLabel(MouseEvent evt) {
        log.append(OTHER_LINE_END);
        log.append("list PrinterTest sNow" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        log.append("Event:" + evt.getButton() + " id:" + evt.getID() + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());


        byte[] custom2x4 = get2x4CustomLabelBytes();
        PrinterFinderSvc svc = new PrinterFinderSvc();

        String labelPartial = jTextPrinterName.getText();
        log.append("matching partial:" + labelPartial + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());
        if (svc.isNameIpStyle(labelPartial)) {
            boolean done = doPrintStreamByIp(labelPartial, custom2x4);
            log.append("Print by Ip  Service Completed:" + done + " verses:" + labelPartial + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }

        String fullName = svc.getFirstLabelPrinterName(labelPartial);
        log.append("matching printers:" + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        PrintService psZebra = svc.getFirstLabelPrinterServiceNamed(fullName);
        if (psZebra == null) {
            log.append("service nof found for name:" + fullName + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }
        log.append("Found printer: " + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        jTextPrinterName.setText(fullName);
        DocPrintJob job = psZebra.createPrintJob();

        DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;

        Doc doc = new SimpleDoc(custom2x4, flavor, null);
        try {
            job.addPrintJobListener(new JobStatusListener(log));
            job.print(doc, null);

        } catch (PrintException e) {
            LOG.error("Failed 2x4 TEST Label Printing", e);
            log.append("Found printer: " + e + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
        }
    }

    protected byte[] get2x4CustomLabelBytes() {
        String lineEnd = OTHER_LINE_END;
        StringBuilder buf = new StringBuilder(123);
        buf.append("<-------------2x4 TEST Label---------------Click file, print, select Zebra printer, press print--------------------------------------->").append(lineEnd);

        buf.append("~CC^").append(lineEnd);
        buf.append("^XA^JMA^FS^XZ").append(lineEnd);
        buf.append("^XA^SS,,,0487^FS^XZ").append(lineEnd);
        buf.append("^XA^MNY^FS^XZ").append(lineEnd);
        buf.append("^XA^MMT^FS^XZ").append(lineEnd);
        buf.append("^XA^MD+00^FS^XZ").append(lineEnd);
        buf.append("^XA^PRC^FS^XZ").append(lineEnd);
        buf.append("^XA^IDR:*.GRF^XZ").append(lineEnd);
        buf.append("^XA^IDR:*.*^XZ").append(lineEnd);
        buf.append("^XA^MCY^XZ").append(lineEnd);
        buf.append("^XA^LH0000,0000^FS^PON^FS").append(lineEnd);

        buf.append("^FO0172,0277^BY04,2,100^BUN,0100,Y,N,Y^FD074804116397^FS").append(lineEnd);
        buf.append("^FO0064,0014^GB0642,0000,0006^FS").append(lineEnd);
        buf.append("^FO0700,0018^GB0000,0422,0006^FS").append(lineEnd);
        buf.append("^FO0064,0016^GB0000,0422,0006^FS").append(lineEnd);
        buf.append("^FO0064,0436^GB0642,0000,0006^FS").append(lineEnd);
        buf.append("^FO0072,0060^A0N,0044,0054^FD PART #PKC0MA-01^FS").append(lineEnd);

        buf.append("^FO0072,0100^ABN,0011,0007^FDOld World Industries, 2x4TEST^FS").append(lineEnd);
        buf.append("^FO0072,0124^ABN,0011,0007^FD5000 W 41ST ST (MFG PLANT)^FS").append(lineEnd);

        buf.append("^FO0340,0100^AFN,0026,0010^FDCustomer Location #33^FS").append(lineEnd);


        DateFormat fdfd = new SimpleDateFormat(DATE_DISPLAYPATTERN);
//        FastDateFormat fdfd = FastDateFormat.getInstance(DATE_DISPLAYPATTERN);
        String dayTime = fdfd.format(new Date());
        buf.append("^FO0072,0142^ABN,0011,0007^FD").append(dayTime).append("^FS").append(lineEnd);
        String user = System.getProperty("user.name");
        buf.append("^FO0072,0160^ABN,0011,0007^FD").append("User:").append(user).append("^FS").append(lineEnd);
        buf.append("^FO0072,0180^ABN,0011,0007^FDTest Ville, IL 60804-4524^FS").append(lineEnd);

        buf.append("^FO0072,0220^A0N,0032,0040^FD1 (847) 664-2000^FS").append(lineEnd);

        buf.append("^ISLB,N^FS^XZ").append(lineEnd);
        buf.append("^XA^MCY^XZ^XA^ILLB^FS").append(lineEnd);
        buf.append("^FO0000,0000^AAN,0000,0000^FD ^FS").append(lineEnd);
        buf.append("^PQ0001,0000,0000,N^FS^MCN^XZ").append(lineEnd);
        buf.append("<----------------------------------break1--------------------------------------->").append(lineEnd);

        return buf.toString().getBytes(Charset.forName(ZplFileParser.BYTE_CHAR_READER));
    }

    private void doPrinterLookup(MouseEvent evt) {
        PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();
        DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
        PrintService printService[] = PrintServiceLookup.lookupPrintServices(
            flavor, pras);
        PrintService defaultService = PrintServiceLookup
            .lookupDefaultPrintService();
        PrintService service = ServiceUI.printDialog(null, 200, 200,
            printService, defaultService, flavor, pras);
        if (service != null) {
            LOG.info(" selected p:" + service.getName());
            jTextPrinterName.setText(service.getName());
            return;
        }
        LOG.info("no printer selected");
    }

    private boolean doPrintStreamByIp(String labelByIp, byte[] contentArray) {
        PrinterFinderSvc svc = new PrinterFinderSvc();

        int port = svc.getPort(labelByIp);
        if (port < 1) {
            LOG.info("cannot obtain port vs:" + labelByIp + " found:" + port);
            return false;
        }
        URL printerUrl = svc.getPrinterUrl(labelByIp);
        if (printerUrl == null) {
            LOG.info("cannot obtain url vs:" + labelByIp + " on port:" + port);
            return false;
        }
        ByteArrayInputStream bis = null;
        try {
            bis = new ByteArrayInputStream(contentArray);
            return IoUtils.pipeToHostPrinter(bis, labelByIp);
        } finally {
            IoUtils.cleanUpInputStream(bis);
        }
    }

    private boolean doPrintByIp(String labelByIp, File labelFile) {
        PrinterFinderSvc svc = new PrinterFinderSvc();

        int port = svc.getPort(labelByIp);
        if (port < 1) {
            LOG.info("cannot obtain port vs:" + labelByIp + " found:" + port);
            return false;
        }
        URL printerUrl = svc.getPrinterUrl(labelByIp);
        if (printerUrl == null) {
            LOG.info("cannot obtain url vs:" + labelByIp + " on port:" + port);
            return false;
        }
        return IoUtils.pipeToHost(labelFile.getAbsolutePath(), printerUrl.getHost(), printerUrl.getPort());
    }

    private void doCalibrate(MouseEvent evt) {
        log.append(OTHER_LINE_END);
        log.append("Printer Calibration sNow" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        log.append("Event:" + evt.getButton() + " id:" + evt.getID() + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        byte[] calibrateBytes = getPrinterCalibrateBytes();

        PrinterFinderSvc svc = new PrinterFinderSvc();

        String labelPartial = jTextPrinterName.getText();
        log.append("matching partial:" + labelPartial + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());
        if (svc.isNameIpStyle(labelPartial)) {
            boolean done = doPrintStreamByIp(labelPartial, calibrateBytes);
            log.append("Print by Ip  Service Completed:" + done + " verses:" + labelPartial + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }


        String fullName = svc.getFirstLabelPrinterName(labelPartial);
        log.append("matching printers:" + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        PrintService psZebra = svc.getFirstLabelPrinterServiceNamed(fullName);
        if (psZebra == null) {
            log.append("service nof found for name:" + fullName + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }
        log.append("Found printer: " + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        jTextPrinterName.setText(fullName);
        DocPrintJob job = psZebra.createPrintJob();
        DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
        Doc doc = new SimpleDoc(calibrateBytes, flavor, null);
        try {
            job.addPrintJobListener(new JobStatusListener(log));
            job.print(doc, null);

        } catch (PrintException e) {
            LOG.error("Failed Calibration ", e);
            log.append("Found printer: " + e + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
        }
    }

    private void doListPrinterConfig(MouseEvent evt) {
        log.append(OTHER_LINE_END);
        log.append("list Printer Config sNow" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        log.append("Event:" + evt.getButton() + " id:" + evt.getID() + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        byte[] cancelBytes = getCancelJobBytes();
        byte[] calibrateBytes = getPrintConfigBytes();

        PrinterFinderSvc svc = new PrinterFinderSvc();

        String labelPartial = jTextPrinterName.getText();
        log.append("matching partial:" + labelPartial + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());
        if (svc.isNameIpStyle(labelPartial)) {
            boolean done = doPrintStreamByIp(labelPartial, cancelBytes);
            log.append("Print by Ip Cancel Service Completed:" + done + " verses:" + labelPartial + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            if (done) {
                done = doPrintStreamByIp(labelPartial, calibrateBytes);
                log.append(
                    "Print by Ip Label Printer Config Service Completed:" + done + " verses:" + labelPartial + OTHER_LINE_END);
                log.setCaretPosition(log.getDocument().getLength());
            }
            return;
        }


        String fullName = svc.getFirstLabelPrinterName(labelPartial);
        log.append("matching printers:" + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        PrintService psZebra = svc.getFirstLabelPrinterServiceNamed(fullName);
        if (psZebra == null) {
            log.append("service nof found for name:" + fullName + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }
        log.append("Found printer: " + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        jTextPrinterName.setText(fullName);
        DocPrintJob job = psZebra.createPrintJob();
        DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
        Doc doc = new SimpleDoc(cancelBytes, flavor, null);
        try {
            job.addPrintJobListener(new JobStatusListener(log));
            job.print(doc, null);

        } catch (PrintException e) {
            LOG.error("Failed List Printer Config ", e);
            log.append("Found printer: " + e + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
        }

        DocPrintJob job2 = psZebra.createPrintJob();
        Doc doc2 = new SimpleDoc(calibrateBytes, flavor, null);
        try {
            job2.addPrintJobListener(new JobStatusListener(log));
            job2.print(doc2, null);

        } catch (PrintException e) {
            LOG.error("Failed List Printer Config ", e);
            log.append("Found printer: " + e + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
        }
    }

    private void doPrintPastedLabel(MouseEvent evt) {
        log.append("Event:" + evt.getButton() + " id:" + evt.getID() + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());
        log.append("PrinterLabel File Button clicked!" + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        Charset local = defaultCharset();

        byte[] labelBytes = jBarByteTextArea.getText().getBytes(local);

        PrinterFinderSvc svc = new PrinterFinderSvc();

        String labelPartial = jTextPrinterName.getText();
        if (svc.isNameIpStyle(labelPartial)) {
            boolean didSpool = doPrintStreamByIp(labelPartial, labelBytes);

            log.append("Print by Ip  Service Completed:" + didSpool + " verses:" + labelPartial + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }
        String fullName = svc.getFirstLabelPrinterName(labelPartial);
        PrintService psZebra = svc.getFirstLabelPrinterServiceNamed(fullName);
        if (psZebra == null) {
            log.append("service nof found for name:" + fullName + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
            return;
        }
        log.append("Found printer: " + fullName + OTHER_LINE_END);
        log.setCaretPosition(log.getDocument().getLength());

        jTextPrinterName.setText(fullName);

        DocPrintJob job = psZebra.createPrintJob();

        DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;

        Doc doc = new SimpleDoc(labelBytes, flavor, null);
        try {
            job.addPrintJobListener(new JobStatusListener(log));
            job.print(doc, null);

        } catch (PrintException e) {
            log.append("Found printer: " + e + OTHER_LINE_END);
            log.setCaretPosition(log.getDocument().getLength());
        }
    }
}
